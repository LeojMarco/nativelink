{
  "stores": {
    "GRPC_LOCAL_STORE": {
      "grpc": {
        "instance_name": "main",
        "endpoints": ["grpc://${CAS_ENDPOINT:-127.0.0.1}:50051"],
        "store_type": "CAS"
      }
    },
    "GRPC_LOCAL_AC_STORE": {
      "grpc": {
        "instance_name": "main",
        "endpoints": ["grpc://${CAS_ENDPOINT:-127.0.0.1}:50051"],
        "store_type": "AC"
      }
    }
  },
  "schedulers": {
    "MAIN_SCHEDULER": {
      "property_modifier": {
        "modifications": [
          {"Add": {"name": "cpu_count", "value": "1"}},
          {"Remove": "container-image"},
          {"Remove": "InputRootAbsolutePath"}
        ],
        "scheduler": {
          "simple": {
            "supported_platform_properties": {
              "OSFamily": "Priority",
              "cpu_count": "Minimum",
              // Note: These need to be declared, but Priority will cause them to
              // not be a requirement.
              "container-image": "Priority",
              "InputRootAbsolutePath": "Priority"
            }
          }
        }
      }
    }
  },
  "servers": [{
    "listen_address": "0.0.0.0:50052",
    "services": {
      "ac": {
        "main": {
          "ac_store": "GRPC_LOCAL_AC_STORE"
        }
      },
      "cas": {
        "main": {
         "cas_store": "GRPC_LOCAL_STORE"
        }
      },
      "bytestream": {
        "cas_stores": {
         "main": "GRPC_LOCAL_STORE"
        },
        "max_bytes_per_stream": 64000,
      },
      "execution": {
        "main": {
          "cas_store": "GRPC_LOCAL_STORE",
          "scheduler": "MAIN_SCHEDULER",
        }
      },
      "capabilities": {
        "main": {
          "remote_execution": {
            "scheduler": "MAIN_SCHEDULER",
          }
        }
      }
    }
  }, {
    "listen_address": "0.0.0.0:50061",
    "services": {
      // Note: This should be served on a different port, because it has
      // a different permission set than the other services.
      // In other words, this service is a backend api. The ones above
      // are a frontend api.
      "worker_api": {
        "scheduler": "MAIN_SCHEDULER",
      },
      // Expose prometheus for metrics on private port.
      "prometheus": {}
    }
  }]
}
